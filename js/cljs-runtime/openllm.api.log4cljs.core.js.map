{"version":3,"sources":["openllm/api/log4cljs/core.cljs"],"mappings":";AAQA,IAAMA,YAAIC;AAAV,AACE,6CAAA,2CAAA,wEAAA,oEAAA,oEAAA,uEAAA,/WAAeC,gJAAsB,AAAAF,qEACD,AAAAA,oEACA,AAAAA,sEACC,AAAAA,oEACF,AAAAA;AAKrC,AAAA;;;;;;;;;;;;;gCAAA,wCAAAG,xEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qEAAA,rEAAME,gFAYHM,MAAQC;AAZX,AAaE,IAAMC,eAAO,CAACf,2EAAAA,kFAAAA,TAAca,8DAAAA;AAA5B,AACE,GAAM,iBAAA,hBAAME;AAAZ,AACE,MACC,gDAAA,iFAAA,2CAAA,6DAAA,zOAACC,mOACgBH,4EACQC;;AAJ5B;;AAKE,AAACG,8CAAMF,aAAOD;;AAnBpB;;;AAAA,CAAA,wDAAA,xDAAMP;;AAAN;AAAA,CAAA,kDAAA,WAAAC,7DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAuBA","names":["out","js/console","openllm.api.log4cljs.core/kw->js-log-fn","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","openllm.api.log4cljs.core/log","seq36070","G__36071","cljs.core/first","cljs.core/next","self__5754__auto__","level","args","log-fn","cljs.core.ex_info","cljs.core.apply"],"sourcesContent":["(ns openllm.api.log4cljs.core\n  \"Ultra advanced logging framework. Checks all the boxes for an enterprise\n   grade logging framework:\n   1. Logs stuff\n   2. Does not allow RCE\n       -> This technology is years ahead of the competition. looking at you,\n          log4j.\")\n\n(let [out js/console]\n  (def ^:private kw->js-log-fn {:debug out.debug\n                                :info out.info\n                                :warn out.warn\n                                :error out.error\n                                :log out.log}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Public API             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn log\n  \"Log a message to the browser's console. It can log to the levels\n   `:debug`, `:info`, `:warn` and `:error`. Additionally you can use\n   `:log` to log to the `log` level, although you can do that with\n   clojure's `print` function as well, assuming you have enabled\n   console printing with `enable-console-print!`.\n\n   It is a consideration to also persist any incoming messages to the\n   database in the future. This could be done using IndexedDB API and\n   offering a possibility to download (archived?) logs.\n\n   Returns `nil`.\"\n  [level & args]\n  (let [log-fn (kw->js-log-fn level)]\n    (when (nil? log-fn)\n      (throw\n       (ex-info \"Invalid log level. Valid log levels are :debug, :info, :warn, :error and :log.\"\n                {:level level\n                 :original-args args})))\n      (apply log-fn args))\n  nil)\n\n\n(comment\n  ;; will print a message to the console, level \"warn\"\n  (log :warn \"uptempo hardcore\" 200 \"bpm, gabber hakken hardcore\")) ;; => nil\n"]}