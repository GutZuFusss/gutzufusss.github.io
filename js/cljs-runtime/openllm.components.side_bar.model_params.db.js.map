{"version":3,"sources":["openllm/components/side_bar/model_params/db.cljs"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","openllm.components.side-bar.model-params.db/key-seq","seq28244","self__5755__auto__","cljs.core/seq","more-keys","cljs.core.into","openllm.components.side-bar.model-params.db/parameter-meta-data","cljs.core/float?","cljs.core/int?","cljs.core/boolean?","openllm.components.side-bar.model-params.db/get-validate-range-predicate","keyword","type-predicate","param","cljs.core.get_in","cljs.spec.alpha/and-spec-impl","p1__28248#","cljs.core/first","cljs.core/second","cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__28249","cljs.core/map?","cljs.core/contains?","openllm.components.side-bar.model-params.db/initial-db","cljs.core/PersistentArrayMap"],"sourcesContent":["(ns openllm.components.side-bar.model-params.db\n  \"The branch of the `app-db` that saves data related to the model-params-db view.\n   This includes all the configuration parameters for the models.\n   The path to this branch can be expressed as:\n   *root -> components -> side-bar -> model-params*\"\n  (:require [clojure.spec.alpha :as s]))\n\n(defn key-seq\n  \"Returns the key sequence to access the model-params-db This is useful for\n   `assoc-in` and `get-in`. The `more-keys` argument is optional and can be\n   used to access a sub-key of the model-params-db\n   Returns the key sequence to access the model-params-db\"\n  [& more-keys]\n  (into [:components-db :side-bar-db :model-params-db] more-keys))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                Spec                ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(def parameter-meta-data\n  \"A map with parameter id's as keys and some metadata for easier rendering.\" \n   {:temperature                  {:display-type :slider   :type-pred float?    :val-constraint [0.0 1.0]}\n    :top_k                        {:display-type :slider   :type-pred int?      :val-constraint [0 100]}\n    :top_p                        {:display-type :slider   :type-pred float?    :val-constraint [0.1 1.0]}\n    :typical_p                    {:display-type :slider   :type-pred float?    :val-constraint [0.1 1.0]}\n    :epsilon_cutoff               {:display-type :slider   :type-pred float?    :val-constraint [0.0 1.0]}\n    :eta_cutoff                   {:display-type :slider   :type-pred float?    :val-constraint [0.0 1.0]}\n    :diversity_penalty            {:display-type :slider   :type-pred float?    :val-constraint [0.0 5.0]}\n    :repetition_penalty           {:display-type :slider   :type-pred float?    :val-constraint [0.0 5.0]}\n    :encoder_repetition_penalty   {:display-type :slider   :type-pred float?    :val-constraint [0.0 5.0]}\n    :length_penalty               {:display-type :slider   :type-pred float?    :val-constraint [0.0 5.0]}\n    :num_beams                    {:display-type :field    :type-pred int?      :val-constraint [0 10]}\n    :penalty_alpha                {:display-type :slider   :type-pred float?    :val-constraint [0.0 10.0]}\n    :max_new_tokens               {:display-type :field    :type-pred int?      :val-constraint [0 ##Inf]}\n    :min_length                   {:display-type :field    :type-pred int?      :val-constraint [0 ##Inf]}\n    :min_new_tokens               {:display-type :field    :type-pred int?      :val-constraint [0 ##Inf]}\n    :early_stopping               {:display-type :binary   :type-pred boolean?  :val-constraint [true false]}\n    :max_time                     {:display-type :field    :type-pred float?    :val-constraint [0.0 ##Inf]}\n    :num_beam_groups              {:display-type :field    :type-pred int?      :val-constraint [0 ##Inf]}\n    :use_cache                    {:display-type :binary   :type-pred boolean?  :val-constraint [true false]}})\n\n(defn get-validate-range-predicate\n  \"Returns a predicate that checks if the value is within the range of the\n   parameter. The parameter is specified by the `type-predicate` argument.\n   The predicate is a function that takes a value and returns true if the value\n   is within the range of the parameter and false otherwise.\"\n  [keyword type-predicate]\n  (let [param (get-in parameter-meta-data [keyword :val-constraint])]\n    (s/and type-predicate\n           #(<= (first param) % (second param)))))\n\n(s/def ::temperature (get-validate-range-predicate :temperature float?))\n(s/def ::top_k (get-validate-range-predicate :top_k int?))\n(s/def ::top_p (get-validate-range-predicate :top_p float?))\n(s/def ::typical_p (get-validate-range-predicate :typical_p float?))\n(s/def ::epsilon_cutoff (get-validate-range-predicate :epsilon_cutoff float?))\n(s/def ::eta_cutoff (get-validate-range-predicate :eta_cutoff float?))\n(s/def ::diversity_penalty (get-validate-range-predicate :diversity_penalty float?))\n(s/def ::repetition_penalty (get-validate-range-predicate :repetition_penalty float?))\n(s/def ::encoder_repetition_penalty (get-validate-range-predicate :encoder_repetition_penalty float?))\n(s/def ::length_penalty (get-validate-range-predicate :length_penalty float?))\n(s/def ::num_beams (get-validate-range-predicate :num_beams int?))\n(s/def ::penalty_alpha (get-validate-range-predicate :penalty_alpha float?))\n(s/def ::max_new_tokens int?)\n(s/def ::min_length int?)\n(s/def ::min_new_tokens int?)\n(s/def ::early_stopping boolean?)\n(s/def ::max_time float?)\n(s/def ::num_beam_groups int?)\n(s/def ::use_cache boolean?)\n(s/def ::model-params-db (s/keys :req-un [::temperature ::top_k ::top_p ::typical_p\n                                          ::epsilon_cutoff ::eta_cutoff ::diversity_penalty\n                                          ::repetition_penalty ::encoder_repetition_penalty\n                                          ::length_penalty ::max_new_tokens ::min_length\n                                          ::min_new_tokens ::early_stopping ::max_time\n                                          ::num_beams ::num_beam_groups ::penalty_alpha\n                                          ::use_cache]))\n\n(defn initial-db\n  \"Very arbitrary. Should be fetched from metadata endpoint eventually.\" ;; TODO: fetch from metadata endpoint\n  []\n  (array-map :temperature 0.9\n             :top_k 50\n             :top_p 0.4\n             :typical_p 1.0\n             :epsilon_cutoff 0.0\n             :eta_cutoff 0.0\n             :diversity_penalty 0.0\n             :repetition_penalty 1.0\n             :encoder_repetition_penalty 1.0\n             :length_penalty 1.0\n             :max_new_tokens 2048\n             :min_length 0\n             :min_new_tokens 0\n             :early_stopping false\n             :max_time 0.0\n             :num_beams 1\n             :num_beam_groups 1\n             :penalty_alpha 0.0\n             :use_cache true))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  ;; check if initial-db is valid\n  (s/valid? ::model-params-db (initial-db)))\n"]}