{"version":3,"sources":["openllm/db.cljs"],"mappings":";AA8BA,AAAAA,yBAAA,AAAA,mFAAA,AAAA,iFAAmBC;AACnB,AAAAD,yBAAA,AAAA,uFAAA,AAAA,iFAAsBE;AACtB,AAAAF,yBAAA,AAAA,oEAAA,AAAA,mhBAAa,AAAAG,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,oXAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,EAAA,AAAAE,0BAAAF,SAAA,4EAAA,EAAA,AAAAE,0BAAAF,SAAA,kEAAA,AAAAE,0BAAAF,SAAA;GAAA,AAAA,iCAAA,AAAA,oXAAA,AAAA,KAAA,AAAA,kSAAA,AAAA,iCAAA,AAAA,ywDAAA,AAAA;AAIb;;;;;wBAAA,2CAAA,yGAAA,4DAAA,gEAAA,qEAAA,7WAAKG,yIAIa,AAACC;AAQnB","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/string?","cljs.spec.alpha/map-spec-impl","G__28732","cljs.core/map?","cljs.core/contains?","openllm.db/default-db","openllm.components.db/initial-db"],"sourcesContent":["(ns openllm.db\n  \"This namespace acts as the root app-db for the application. The `db` namespaces\n   define the structure of the `app-db`. They each define a schema for the\n   respective branch of the `app-db`. The `db` namespaces should only be used by\n   the `events` and `subs` namespaces.\n   The `clojure.spec` schema is checked against the `app-db` after each event\n   handler has run. This is done by the `events` namespaces with the help of the\n   `check-spec-interceptor` from the `openllm.events` namespace.\n   \n   Please note that each `db` namespace has an `initial-db` function which\n   returns the initial value for each branch of the `app-db`.\n\n   Furthermore be aware that the `app-db` is immutable. This means that you cannot\n   change the `app-db` directly. Instead you have to dispatch an event which will\n   then change the `app-db` as a whole.\"\n  (:require [openllm.components.db :as components-db]\n            [cljs.spec.alpha :as s]))\n\n;; Below is is the root `clojure.spec` specification for the value in app-db.\n;; It basically works like a like a schema.\n;; See: http://clojure.org/guides/spec\n;;\n;; The value in app-db should always match this spec. Only event handlers\n;; can change the value in app-db so, after each event handler\n;; has run, we re-check app-db for correctness (compliance with the Schema).\n;;\n;; How is this done? Look in events.cljs and you'll notice that all handlers\n;; have an \"after\" interceptor which does the spec re-check.\n;; None of this is strictly necessary. It could be omitted. But we (the\n;; re-frame people) find it good practice.\n(s/def ::screen-id keyword?)\n(s/def ::api-base-url string?)\n(s/def ::db  (s/keys :req-un [::components-db/components-db\n                              ::screen-id\n                              ::api-base-url]))\n\n(def default-db\n  \"What gets put into app-db by default. This is the very root of the `app-db`.\n   See `core.cljs` for `(dispatch-sync [:initialise-db])` and 'events.cljs'\n   for the registration of `:initialise-db` effect handler.\"\n  {:components-db (components-db/initial-db)\n   :screen-id :playground\n   :api-base-url \"http://localhost:3000\"})\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  ;; some examples on namespaced keywords\n  (= :components-db/components-db :openllm.components.db/components-db) ;; => false\n  (= ::components-db/components-db :openllm.components.db/components-db) ;; => true\n  (= ::components-db/components-db ::openllm.components.db/components-db) ;; => true\n  (= :components-db :openllm.components.db) ;; => false\n\n\n  ;; check if default db complies with spec\n  (s/valid? ::db default-db) ;; => true\n\n\n  ;; check if manipulated db (no screen-id key) complies with spec\n  (s/valid? ::db (dissoc default-db :screen-id)) ;; => false\n\n\n  ;; reset app-db to default-db\n  (do (require '[re-frame.core :as rf])\n      (rf/dispatch-sync [:initialise-db])))\n"]}