{"version":3,"sources":["openllm/app.cljs"],"mappings":";AAeA,4BAAA,2CAAA,2DAAA,2CAAA,0DAAA,2CAAA,sKAAA,kIAAA,+IAAA,+DAAA,2CAAA,sKAAA,kIAAA,wIAAA,nuCAAKA,wUAC0B,AAAA,qFAAQC,kFACP,oEAAA,pEAACC,4CAAIC,oFACN,2EAAA,3EAACD,4CAAIE,8MACL,AAAA,qFAAQH,kFACP,oEAAA,pEAACC,4CAAIC,oFACN,oEAAA,pEAACD,4CAAIC,8FACZE;AAGxB;;;;;kBAAA,lBAAMC;AAAN,AAAA,0FAAA,iDAAA,0IAAA,gLAAA,vOAMIC,0IACAC,kCAAsB,AAACC,gCAAoBT,8GAC1CU;;AAEL,GAAA,QAAAC,oCAAAC,wCAAAC;AAAA;AAAA,AAAA,AAASC,mBAAK,AAACC,+BAAiB,wBAAA,xBAACC;;AACjC;;;;;oBAAA,pBAAuBC;AAAvB,AAKE,gFAAA,zEAACC,wDAAYJ,oGAAMR;;AAErB;;;;;;;;mBAAA,nBAAMa;AAAN,AAQE,AAACC;;AACD,4BAAA,mFAAA,/GAACC;;AACD,AAACC;;AACD,OAACL","names":["openllm.app/openllm-theme","reagent-mui.colors/common","cljs.core.get","reagent-mui.colors/grey","reagent-mui.colors/deep-purple","reagent-mui.colors/red","openllm.app/app","reagent-mui.material.css-baseline/css-baseline","reagent-mui.styles/theme-provider","reagent-mui.styles/create-theme","openllm.views/dashboard","js/openllm","js/openllm.app","js/openllm.app.root","openllm.app/root","reagent.dom.client/create-root","js/document.getElementById","openllm.app/start","reagent.dom.client.render","openllm.app/init","cljs.core/enable-console-print!","re-frame.core/dispatch-sync","openllm.api.persistence/init-idb"],"sourcesContent":["(ns openllm.app\n    (:require [openllm.api.persistence :as persistence]\n              [reagent.dom.client :as rdom]\n              [openllm.views :as views]\n              [re-frame.core :as rf]\n              [reagent-mui.styles :as styles]\n              [reagent-mui.colors :as colors]\n              [reagent-mui.material.css-baseline :refer [css-baseline]]\n\n              ;; the following are only required to make the compiler load the namespaces\n              [day8.re-frame.http-fx]\n              [openllm.events]\n              [openllm.subs]\n              [openllm.api.http]))\n\n(def openllm-theme\n  {:palette {:primary   {:main (:black colors/common)\n                         :light (get colors/grey 800)\n                         :dark (get colors/deep-purple 900)}\n             :secondary {:main (:white colors/common)\n                         :light (get colors/grey 200)\n                         :dark (get colors/grey 800)}\n             :error     colors/red}})\n\n\n(defn app\n  \"The main app component, which is rendered into the DOM. This component\n   just wraps the dashboard component, which is the effective root\n   component of the application.\"\n  []\n  [:<>\n   [css-baseline]\n   [styles/theme-provider (styles/create-theme openllm-theme)\n    [views/dashboard]]])\n\n(defonce root (rdom/create-root (js/document.getElementById \"app\")))\n(defn ^:dev/after-load start\n  \"Starts the app by rendering the app component into the DOM. This\n   function is the root rendering function, and is called by the\n   `init` function right after the databases are initialized.\"\n  []\n  (rdom/render root [app]))\n\n(defn init\n  \"This init function is called exactly once when the page loads.\n   Responsible for initializing the app-db as well as the IndexedDB\n   (persistent) database.\n\n   This marks the entry point of the application, and is called by shadow-cljs\n   directly.\"\n  []\n  (enable-console-print!) ;; so that print writes to `console.log`\n  (rf/dispatch-sync [:initialise-db])\n  (persistence/init-idb)\n  (start))\n"]}