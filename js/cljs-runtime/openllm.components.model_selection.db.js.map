{"version":3,"sources":["openllm/components/model_selection/db.cljs"],"mappings":"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","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","openllm.components.model-selection.db/key-seq","seq30606","self__5755__auto__","cljs.core/seq","more-keys","cljs.core.into","openllm.components.model-selection.db/loading-text","cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","G__30608","cljs.spec.alpha/and-spec-impl","p1__30607#","cljs.core/string?","cljs.core._EQ_","cljs.core/vector?","G__30609","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__30610","cljs.core/map?","cljs.core/contains?","or__5045__auto__","cljs.spec.alpha.tuple_impl","G__30611","i__13226__auto__","v__13227__auto__","cljs.core.nth","cljs.core/keyword?","G__30613","p1__30612#","cljs.core/Keyword","and__5043__auto__","G__30614","openllm.components.model-selection.db/initial-db","re-frame.core/dispatch"],"sourcesContent":["(ns openllm.components.model-selection.db\n  \"The branch of the `app-db` that saves data related to the model-selection view.\n   This includes the current model selection, as well as the data for all available\n   models.\n   The path to this branch can be expressed as:\n   *root -> components -> model-selection*\"\n  (:require [re-frame.core :as rf]\n            [clojure.spec.alpha :as s]))\n\n(defn key-seq\n  \"Returns the key sequence to access the model-selection-db This is useful for\n   `assoc-in` and `get-in`. The `more-keys` argument is optional and can be\n   used to access a sub-key of the model-selection-db\n   Returns the key sequence to access the model-selection-db\"\n  [& more-keys]\n  (into [:components-db :model-selection-db] more-keys))\n\n(def loading-text \"Loading...\")\n\n(declare get-all-models)\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                Spec                ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(s/def ::vec-of-runtimes? (s/coll-of\n                           (s/and string?\n                                  #(or (= % \"pt\")\n                                       (= % \"flax\")  ;; all available runtimes\n                                       (= % \"tf\")))\n                           :kind vector?))\n\n(s/def ::model_id (s/coll-of string? :kind vector?))                   ;; model_id is a vector of all models for a given model_type\n(s/def ::url string?)                                                  ;; url to the model's page\n(s/def ::requires_gpu boolean?)                                        ;; whether the model requires a gpu\n(s/def ::runtime_impl ::vec-of-runtimes?)                              ;; supported runtimes\n(s/def ::installation string?)                                         ;; installation instructions (pip command)\n(s/def ::model-spec (s/keys :req-un [::model_id ::url ::requires_gpu   ;; the spec for a single model (aggregates all the above)\n                                     ::runtime_impl ::installation]))\n(s/def ::all-models #(or loading-text                                  ;; -- this is the case when the file with the model data has not been loaded yet by the ::set-model-data effect\n                         (s/map-of keyword? ::model-spec)))            ;; map of all models\n\n(s/def ::selected-model (s/keys :req-un\n                                [::model-type #(or (keyword? %)        ;; currently selected model-id and model-type\n                                                   (= % loading-text)) ;; -- same as above\n                                 ::model-id string?]))\n\n(s/def ::model-selection-db (s/keys :req-un [::all-models\n                                             ::selected-model]))       ;; the spec of the model-selection-db\n\n(defn initial-db\n  \"Initial values for this branch of the app-db.\n   Triggers the loading of the model data by dispatching the `:slurp-model-data-json`\n   event.\" \n  []\n  (rf/dispatch [:slurp-model-data-json])\n  {:all-models loading-text ;; will be overwritten by the event dispatched above\n   :selected-model {:model-type :chatglm\n                    :model-id \"thudm/chatglm\"}})\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  ;; check if initial-db is valid\n  (s/valid? ::model-selection-db (initial-db)))\n"]}