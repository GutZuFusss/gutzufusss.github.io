{"version":3,"sources":["openllm/components/chat/views.cljs"],"mappings":"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","names":["openllm.components.chat.views/chat-input-field","on-submit","p1__29217#","chat-input-sub","re_frame.core.subscribe","on-change","re-frame.core/dispatch","cljs.core/deref","e","cljs.core._EQ_","cljs.core/not","openllm.components.chat.views/chat-controls","llm-config","submit-prompt","on-submit-event","reagent-mui.material.tooltip/tooltip","reagent-mui.material.icon-button/icon-button","reagent-mui.icons.design-services/design-services","reagent-mui.icons.delete-forever/delete-forever","reagent-mui.material.button/button","reagent.core.as_element","reagent-mui.icons.send/send","openllm.components.chat.views/user->bubble-style","user","openllm.components.chat.views/user->text-style","p__29218","map__29219","cljs.core/--destructure-map","cljs.core.get","openllm.components.chat.views/chat-message-entry","text","display-user","alignment","openllm.components.chat.views/chat-history","history","cljs.core.into","cljs.core.map","openllm.components.chat.views/prompt-layout-modal","p1__29220#","modal-open?","prompt-layout-value","reagent-mui.material.modal/modal","reagent-mui.material.box/box","reagent-mui.material.paper/paper","reagent-mui.material.typography/typography","openllm.api.components/file-upload-button","openllm.components.chat.views/chat-tab-contents"],"sourcesContent":["(ns openllm.components.chat.views\n  (:require [re-frame.core :as rf]\n            [openllm.components.chat.events :as events]\n            [openllm.components.chat.subs :as subs]\n            [openllm.components.side-bar.model-params.subs :as model-params-subs]\n            [openllm.components.chat.views :as views]\n            [openllm.api.components :as api-components]\n            [openllm.api.persistence :as persistence]\n            [reagent-mui.material.tooltip :refer [tooltip]]\n            [reagent-mui.material.icon-button :refer [icon-button]]\n            [reagent-mui.icons.delete-forever :as delete-icon]\n            [reagent-mui.material.button :refer [button]]\n            [reagent-mui.material.modal :refer [modal]]\n            [reagent-mui.material.box :refer [box]]\n            [reagent-mui.material.paper :refer [paper]]\n            [reagent-mui.material.typography :refer [typography]]\n            [reagent-mui.icons.design-services :as ds-icon]\n            [reagent-mui.icons.send :as send-icon]\n            [reagent.core :as r]))\n\n(defn chat-input-field\n  \"The chat input field. The `on-submit` callback is called when the user\n   presses the enter key without pressing the shift key.\n   The same event is also dispatched in the `chat-controls` function, if\n   the user clicks the send button.\"\n  [on-submit]\n  (let [chat-input-sub (rf/subscribe [::subs/chat-input-value])\n        on-change #(rf/dispatch [::events/set-chat-input-value (.. % -target -value)])]\n    (fn []\n      [:textarea {:class \"py-1 h-10 w-[calc(100%_-_195px)] block self-end\"\n                  :style {:resize \"none\"}\n                  :placeholder \"Type your message...\"\n                  :value @chat-input-sub\n                  :on-change on-change\n                  :on-key-press (fn [e]\n                                  (when (and (= (.-charCode e) 13) (not (.-shiftKey e)))\n                                    (on-submit)))\n                  :id \"chat-input\"}])))\n\n(defn chat-controls\n  \"Aggregates the chat input field and the send button as well as the\n   prompt layout button.\"\n  []\n  (let [llm-config (rf/subscribe [::model-params-subs/model-config])\n        submit-prompt (rf/subscribe [::subs/prompt])\n        on-submit-event [::events/on-send-button-click @submit-prompt @llm-config]]\n    (fn chat-controls []\n      [:form {:class \"flex mr-2.5 mt-2\"}\n       [chat-input-field #(rf/dispatch on-submit-event)]\n       [:div {:class \"ml-1.5 mr-0.5\"} \n        [tooltip {:title \"Edit prompt layout\"}\n         [icon-button {:on-click #(rf/dispatch [::events/toggle-modal])\n                       :color \"primary\"\n                       :size \"medium\"}\n          [ds-icon/design-services]]]\n        [tooltip {:title \"Clear chat history\"}\n         [icon-button {:on-click #(do (rf/dispatch [::events/clear-chat-history])\n                                      (rf/dispatch [::persistence/clear-chat-history]))\n                       :size \"medium\"\n                       :color \"primary\"}\n          [delete-icon/delete-forever]]]\n        [button {:on-click #(rf/dispatch on-submit-event)\n                 :variant \"outlined\"\n                 :end-icon (r/as-element [send-icon/send])\n                 :style {:width \"96px\"\n                         :margin-left \"8px\"}\n                 :color \"primary\"}\n         \"Send\"]]])))\n\n(defn user->bubble-style\n  \"Produces additional style attributes for a chatbubble contingent upon\n   the provided user.\n   This can be done a lot smarter, but it works for now.\"\n  [user]\n  (str \"p-2 rounded-xl border \" (if (= user :model)\n                                  \"bg-gray-50 mr-10 rounded-bl-none border-gray-200\"\n                                  \"bg-gray-300 ml-10 rounded-br-none border-gray-400\")))\n\n(defn user->text-style\n  \"Produces additional style attributes forthe text of a text message\n   upon the provided user.\n   This can be done a lot smarter, but it works for now.\"\n  [user]\n  (str \"whitespace-pre-wrap \" (if (= user :model) \"text-gray-700\" \"text-gray-950\")))\n\n(defn chat-message-entry\n  \"Displays a single chat message of the chat history.\n   Will be used as a mapping function in the `chat-history` function. The collection\n   being mapped is the entire chat history.\"\n  [{:keys [user text]}]\n  (let [display-user (if (= user :model) \"System\" \"You\")\n        alignment (if (= user :model) \"flex-row\" \"flex-row-reverse\")]\n    [:div {:class (str \"flex \" alignment \" items-end my-2 w-full\")}\n     [:h3 {:class \"font-bold text-lg mx-2\"} display-user]\n     [:div {:class (user->bubble-style user)}\n      [:p {:class (user->text-style user)}\n       text]]]))\n\n(defn chat-history\n  \"The chat history. Transforms the chat history into DOM/hiccup elements by\n   mapping the `chat-message-entry` function over the chat history.\"\n  []\n  (let [history (rf/subscribe [::subs/chat-history])]\n    (fn chat-history []\n      (into [:div {:class \"px-8 flex flex-col items-center\"}]\n            (map chat-message-entry @history)))))\n\n(defn prompt-layout-modal\n  \"The modal for editing the prompt layout. The modal is opened by the\n   `toggle-modal` event and closed by the `toggle-modal` event. The modal\n   is closed by clicking the save button or somewhere outside of the modal.\"\n  []\n  (let [modal-open? (rf/subscribe [::subs/modal-open?])\n        prompt-layout-value (rf/subscribe [::subs/prompt-layout])\n        on-change #(rf/dispatch [::events/set-prompt-layout (.. % -target -value)])]\n    (fn []\n      [modal {:open @modal-open?\n              :on-close #(rf/dispatch [::events/toggle-modal])}\n       [box {:style {:position \"absolute\"\n                     :width 800,\n                     :top \"50%\"\n                     :left \"50%\"\n                     :transform \"translate(-50%, -50%)\"}}\n        [paper {:elevation 24\n                :style {:padding \"20px 30px\"}}\n         [typography {:variant \"h5\"} \"Prompt Layout\"]\n         [:textarea {:class \"pt-3 mt-1 w-full h-64 block border bg-gray-200\"\n                     :value @prompt-layout-value\n                     :on-change on-change}]\n         [:div {:class \"mt-4 flex justify-end space-x-2\"}\n          [api-components/file-upload-button {:callback-event ::events/set-prompt-layout}]\n          [button {:type \"button\"\n                   :variant \"outlined\"\n                   :on-click #(rf/dispatch [::events/toggle-modal])} \"Save\"]]]]])))\n\n(defn chat-tab-contents\n  \"The component rendered if the chat tab is active. It contains the chat\n   history, the chat input field and the chat controls.\"\n  []\n  [:<>\n   [prompt-layout-modal]\n   [paper {:class \"mr-3.5 mt-6 h-[calc(100%_-_75px)]\"\n           :square true}\n    [:div {:id \"chat-history-container\"\n           :class \"overflow-y-scroll w-full h-full no-scrollbar\"\n           :style {:scrollBehavior \"smooth\"}}\n     [chat-history]]]\n   [chat-controls]])\n"]}