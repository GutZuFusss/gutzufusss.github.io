{"version":3,"sources":["openllm/components/side_bar/model_params/events.cljs"],"mappings":";AAMA,yDAAA,8LAAA,vPAACA,0UAECC,8CACD,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;gBAAT,AAAAF,4CAAAD,WAAA,IAAA,vEAAWI;YAAX,AAAAH,4CAAAD,WAAA,IAAA,nEAAqBK;AAArB,AACE,IAAMC,YAAU,+GAAA,6FAAA,5MAACC,+CAAOC,mJAAwBJ;IAC1CK,eAAa,EAAI,AAACC,6CAAEJ,UAAUK,yBACf,AAACC,uBAAaP,OACd,EAAI,AAACK,6CAAEJ,UAAUO,uBACf,AAACC,qBAAWT,OACZA;AALvB,AAME,OAACU,mBAASb,GAAG,AAACc,2IAAWZ,gBAAWK","names":["re_frame.core.reg_event_db","openllm.events/check-spec-interceptor","p__28585","vec__28586","cljs.core.nth","db","_","parameter","value","type-pred","cljs.core.get_in","openllm.components.side-bar.model-params.db/parameter-meta-data","parsed-value","cljs.core._EQ_","cljs.core/float?","cljs.core/parse-double","cljs.core/int?","cljs.core/parse-long","cljs.core/assoc-in","openllm.components.side_bar.model_params.db.key_seq"],"sourcesContent":["(ns openllm.components.side-bar.model-params.events\n  (:require [openllm.components.side-bar.model-params.db :as db]\n            [re-frame.core :refer [reg-event-db]]\n            [openllm.events :refer [check-spec-interceptor]]))\n\n;; will receive the value as string\n(reg-event-db\n ::set-model-config-parameter\n [check-spec-interceptor]\n (fn [db [_ parameter value]]\n   (let [type-pred (get-in db/parameter-meta-data [parameter :type-pred])\n         parsed-value (if (= type-pred float?)\n                        (parse-double value)\n                        (if (= type-pred int?)\n                          (parse-long value)\n                          value))]\n     (assoc-in db (db/key-seq parameter) parsed-value))))\n"]}