{"version":3,"sources":["openllm/components/side_bar/model_selection/events.cljs"],"mappings":";AAUA,uBAAA,vBAACA,mNAEA,WAAKC,KAAKC;AAAV,AACE,0DAAA,nDAACC,8CAAMF,mKAGI,XACA,AAACG,1DACD,q/FAAA,2EAAA,hkGAACC;;AAUf,yDAAA,2KAAA,pOAACC,uTAECC,8CACD,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASP;iBAAT,AAAAQ,4CAAAD,WAAA,IAAA,xEAAWG;AAAX,AACE,IAAMC,KAAG,uGAAA,vGAACC,gDAAQC;IACZC,gBAAc,AAACC,+CAAON,GAAG,8IAAA,4EAAA,1NAACO,+MAAuBN;AADvD,6CAEMD,nBACA,AAACQ,sBAAW,GAAA,HAACN,oEAAgBD,pHAC7B,OAACO,yHAAW,GAAA,HAACN,iEAAc,AAACO,gBAAMJ;;AAE3C,yDAAA,wKAAA,jOAACV,oTAECC,8CACD,cAAAc,HAAKV;AAAL,AAAA,IAAAW,aAAAD;QAAA,AAAAX,4CAAAY,WAAA,IAAA,/DAASpB;eAAT,AAAAQ,4CAAAY,WAAA,IAAA,tEAAWC;AAAX,AACE,OAACJ,mBAASR,GAAG,8IAAA,yEAAA,vNAACO,0RAAsCK;;AAQvD,yDAAA,uFAAA,hJAACC,mOAECjB,sCAAuB,wDAAA,xDAACkB,6PACzB,WAAAC,SAAyCxB;AAAzC,AAAA,IAAAyB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAahB;6BAAb,AAAAkB,4CAAAF,eAAA,pFAAgBG;AAAhB,AAAA,kDAAA,gDACO,iBAAMC,aAAW,AAACF,4CAAIlB,GAAG,8IAAA,9IAACO;AAA1B,AACE,GAAI,EAAI,AAACc,6CAAEC,4DAAgBF,iBAAY,eAAA,dAAMA;AAC3C,OAACZ,mBAASR,GAAG,8IAAA,9IAACO,qNAAwBY;;AACtC,AAAI,mEAAA,uGAAA,1KAACI,6PAA6FH;;AAC9FpB","names":["re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","js/JSON.parse","cljs.core.js__GT_clj","re_frame.core.reg_event_db","openllm.events/check-spec-interceptor","p__28575","vec__28576","cljs.core.nth","db","model-type","ks","cljs.core.partial","openllm.components.side-bar.model-selection.db/key-seq","all-model-ids","cljs.core.get_in","openllm.components.side_bar.model_selection.db.key_seq","cljs.core/assoc-in","cljs.core/first","p__28579","vec__28580","model-id","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__28583","map__28584","cljs.core/--destructure-map","cljs.core.get","model-data-json-parsed","all-models","cljs.core._EQ_","openllm.components.side-bar.model-selection.db/loading-text","openllm.api.log4cljs.core.log"],"sourcesContent":["(ns openllm.components.side-bar.model-selection.events\n  (:require [openllm.components.side-bar.model-selection.db :as db]\n            [openllm.events :refer [check-spec-interceptor]]\n            [openllm.api.log4cljs.core :refer [log]]\n            [re-frame.core :refer [reg-event-db reg-event-fx reg-cofx inject-cofx]])\n  (:require-macros [openllm.build :refer [slurp]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Coeffects              ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-cofx\n ::model-data-json-parsed\n (fn [cofx _]\n   (assoc cofx\n          :model-data-json-parsed\n          (-> \"./src/generated/models-data.json\"\n              (slurp ,) ;; look @ `openllm.build/slurp` to see how this sorcery works\n              (js/JSON.parse ,)\n              (js->clj , :keywordize-keys true)))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Events               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Sets the `model-type` in the db to the selected model-type. It also sets the\n;; `model-id` to the first `model-id` of the selected `model-type`.\n;; This event is dispatched by the `model-type` dropdown in the `views.cljs`\n;; namespace of this component.\n(reg-event-db\n ::set-model-type\n [check-spec-interceptor]\n (fn [db [_ model-type]] \n   (let [ks (partial db/key-seq :selected-model)\n         all-model-ids (get-in db (db/key-seq :all-models model-type :model_id))]\n     (-> db\n         (assoc-in , (ks :model-type) model-type)\n         (assoc-in , (ks :model-id) (first all-model-ids))))))\n\n(reg-event-db\n ::set-model-id\n [check-spec-interceptor]\n (fn [db [_ model-id]]\n   (assoc-in db (db/key-seq :selected-model :model-id) model-id)))\n\n;; This event is dispatched by the `initial-db` function in `db.cljs`. It\n;; slurps the model data json file and parses it into a clojure map. It then\n;; checks if the db already contains data. If it does, it logs a warning and\n;; does nothing. If it doesn't, it adds the parsed data to the db.\n;; The `models-data.json` file is generated by the `generate-models-data-json`\n;; hook in `build.clj` (from JVM Clojure).\n(reg-event-fx\n :slurp-model-data-json\n [check-spec-interceptor (inject-cofx ::model-data-json-parsed)]\n (fn [{:keys [db model-data-json-parsed]} _]\n   {:db (let [all-models (get db (db/key-seq :all-models))]\n          (if (or (= db/loading-text all-models) (nil? all-models))\n            (assoc-in db (db/key-seq :all-models) model-data-json-parsed)\n            (do (log :warn \"Attempted to slurp and parse model data json, but the db already contained data:\" all-models)\n                db)))}))\n"]}