{"version":3,"sources":["openllm/components/playground/events.cljs"],"mappings":";AAOA,yDAAA,qJAAA,9MAACA,iSAECC,8CACD,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;YAAT,AAAAF,4CAAAD,WAAA,IAAA,nEAAWI;AAAX,AACE,OAACC,mBAASH,GAAG,gIAAA,hIAACI,+NAAoCF;;AAErD,yDAAA,0JAAA,nNAACG,sSAECT,8CACD,cAAAU,HAAKN;AAAL,AAAA,IAAAO,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAASN;eAAT,AAAAF,4CAAAQ,WAAA,IAAA,tEAAWC;AAAX,AAAA,kDAAA,iaAAA,6DAAA,mFAAA,jgBACO,AAACL,mBAASH,GAAG,gIAAA,hIAACI,kOAAsC,AAACK,gBAAM,AAAA,6FAAYD;;AAG/E,yDAAA,2JAAA,pNAACH,uSAECT,8CACD,WAAAc,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaZ;IAAbe,aAAAJ;QAAA,AAAAZ,4CAAAgB,WAAA,IAAA,/DAAmBd;QAAnB,AAAAF,4CAAAgB,WAAA,IAAA,/DAAqBC;AAArB,AACE,mEAAA,yGAAA,5KAACC,oMAAmCD;;AADtC,kDAAA,wUAAA,6DAAA,mFAAA,xaAEO,wPAAA,xPAACb,mBAASH,GAAG,gIAAA,hIAACI;;AAGtB,yDAAA,6JAAA,tNAACC,ySAECT,8CACD,aAAAsB,FAAKjB;AAAL,AAAA,IAAAkB,aAAAD;YAAA,AAAAnB,4CAAAoB,WAAA,IAAA,nEAAQlB;aAAR,AAAAF,4CAAAoB,WAAA,IAAA,pEAAUC;iBAAV,AAAArB,4CAAAoB,WAAA,IAAA,xEAAiBE;AAAjB,AAAA,kDAAA,6DAAA,mFAAA,oHAAA,2CAAA,iEAAA,mFAAA,kKAAA,gEAAA,mFAAA,tgBACgCD,OAAOC;;AAGxC,yDAAA,6IAAA,tMAAC1B,yRAECC,8CACD,WAAKI,GAAGC;AAAR,AACE,IAAMqB,YAAU,AAACC,cAAI,AAACC,+CAAOxB,GAAG,gIAAA,hIAACI;AAAjC,AACE,OAACD,mBAASH,GAAG,gIAAA,hIAACI,2NAAkCkB;;AAMpD","names":["re_frame.core.reg_event_db","openllm.events/check-spec-interceptor","p__28768","vec__28769","cljs.core.nth","db","_","value","cljs.core/assoc-in","openllm.components.playground.db.key_seq","re_frame.core.reg_event_fx","p__28772","vec__28773","response","cljs.core/first","p__28776","p__28777","map__28778","cljs.core/--destructure-map","cljs.core.get","vec__28779","e","openllm.api.log4cljs.core.log","p__28782","vec__28783","prompt","llm-config","new-value","cljs.core/not","cljs.core.get_in"],"sourcesContent":["(ns openllm.components.playground.events\n  (:require [openllm.components.playground.db :as db]\n            [openllm.events :refer [check-spec-interceptor]]\n            [re-frame.core :as rf :refer [reg-event-db reg-event-fx]]\n            [openllm.api.http :as api]\n            [openllm.api.log4cljs.core :refer [log]]))\n\n(reg-event-db\n ::set-prompt-input\n [check-spec-interceptor]\n (fn [db [_ value]]\n   (assoc-in db (db/key-seq :playground-input-value) value)))\n\n(reg-event-fx\n ::send-prompt-success\n [check-spec-interceptor]\n (fn [db [_ response]]\n   {:db (assoc-in db (db/key-seq :playground-last-response) (first (:responses response)))\n    :dispatch [::toggle-modal]}))\n\n(reg-event-fx\n ::send-prompt-failure\n [check-spec-interceptor]\n (fn [{:keys [db]} [_ e]]\n   (log :error \"Failed to send prompt\" e)\n   {:db (assoc-in db (db/key-seq :playground-last-response) \"Sorry, something went wrong.\")\n    :dispatch [::toggle-modal]}))\n\n(reg-event-fx\n ::on-send-button-click\n [check-spec-interceptor]\n (fn [_ [_ prompt llm-config]]\n   {:dispatch [::api/v1-generate prompt llm-config {:on-success [::send-prompt-success]\n                                                    :on-failure [::send-prompt-failure]}]}))\n\n(reg-event-db\n ::toggle-modal\n [check-spec-interceptor]\n (fn [db _]\n   (let [new-value (not (get-in db (db/key-seq :response-modal-open?)))]\n     (assoc-in db (db/key-seq :response-modal-open?) new-value))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n (comment\n  ;; clear input field\n   (rf/dispatch [::set-prompt-input \"\"]))\n"]}