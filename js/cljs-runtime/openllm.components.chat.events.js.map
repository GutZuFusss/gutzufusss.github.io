{"version":3,"sources":["openllm/components/chat/events.cljs"],"mappings":"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","names":["re-frame.core/reg-cofx","cofx","_","element","js/document.getElementById","cljs.core.assoc","re_frame.core.reg_event_db","openllm.events/check-spec-interceptor","p__28605","vec__28606","cljs.core.nth","db","new-value","cljs.core/assoc-in","openllm.components.chat.db.key_seq","p__28609","vec__28610","timestamp","user","text","cljs.core.conj","cljs.core.get_in","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__28613","vec__28614","map__28617","cljs.core/--destructure-map","cljs.core.get","time-now","p__28618","vec__28619","response","cljs.core/first","p__28622","vec__28623","e","openllm.api.log4cljs.core.log","p__28626","p__28627","map__28628","vec__28629","prompt","llm-config","input-value","clojure.string/blank?","p__28632","vec__28633","cljs.core/not","p__28636","vec__28637","layout","history-elem"],"sourcesContent":["(ns openllm.components.chat.events\n    (:require [openllm.components.chat.db :as db]\n              [openllm.events :refer [check-spec-interceptor]]\n              [openllm.api.http :as api]\n              [openllm.api.persistence :as persistence]\n              [openllm.api.log4cljs.core :refer [log]]\n              [re-frame.core :refer [reg-cofx reg-event-db reg-event-fx inject-cofx]]\n              [clojure.string :as str]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;              Coeffects             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-cofx\n ::chat-history-element\n (fn [cofx _]\n   (let [element (js/document.getElementById \"chat-history-container\")]\n     (assoc cofx :chat-history-element element))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Events               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-event-db\n ::set-chat-input-value\n [check-spec-interceptor]\n (fn [db [_ new-value]]\n   (assoc-in db (db/key-seq :chat-input-value) new-value)))\n\n(reg-event-db\n ::add-to-app-db-history\n [check-spec-interceptor]\n (fn [db [_ timestamp user text]]\n   (assoc-in db\n             (db/key-seq :chat-history)\n             (conj (get-in db (db/key-seq :chat-history)) {:user user\n                                                           :text text\n                                                           :timestamp timestamp}))))\n\n;; Puts the received or sent message into the IndexedDB database aswell\n;; as the app-db.\n(reg-event-fx\n ::add-to-chat-history\n [(inject-cofx :time-now)]\n (fn [cofx [_ user text]]\n   (let [{:keys [time-now]} cofx]\n     {:dispatch-n [[::add-to-app-db-history time-now user text time-now]\n                   [::persistence/add-to-indexed-db-history time-now user text]]})))\n\n(reg-event-fx\n ::send-prompt-success\n []\n (fn [_ [_ response]]\n   {:dispatch [::add-to-chat-history :model (first (:responses response))]}))\n\n(reg-event-fx\n ::send-prompt-failure\n []\n (fn [_ [_ e]]\n   (log :error \"Failed to send prompt\" e)\n   {:dispatch-later [{:ms 10 :dispatch [::add-to-chat-history :model \"Sorry, something went wrong.\"]}\n                     {:ms 20 :dispatch [::auto-scroll]}]}))\n\n(reg-event-fx\n ::on-send-button-click\n []\n (fn [{:keys [db]} [_ prompt llm-config]]\n   (let [input-value (get-in db (db/key-seq :chat-input-value))]\n    (when (not (str/blank? input-value))\n     {:dispatch-n [[::add-to-chat-history :user input-value]\n                   [::api/v1-generate prompt llm-config {:on-success [::send-prompt-success]\n                                                         :on-failure [::send-prompt-failure]}]\n                   [::set-chat-input-value \"\"]]\n      :dispatch-later [{:ms 10 :dispatch [::auto-scroll]}]}))))\n\n(reg-event-db\n ::toggle-modal\n [check-spec-interceptor]\n (fn [db [_ _]]\n   (let [new-value (not (get-in db (db/key-seq :layout-modal-open?)))]\n     (assoc-in db (db/key-seq :layout-modal-open?) new-value))))\n\n(reg-event-db\n ::set-prompt-layout\n [check-spec-interceptor]\n (fn [db [_ layout]]\n   (assoc-in db (db/key-seq :prompt-layout) layout)))\n\n(reg-event-fx\n ::auto-scroll\n [(inject-cofx ::chat-history-element)]\n (fn [cofx _]\n   (let [history-elem (get cofx :chat-history-element)] \n     (if (some? history-elem)\n       (do (set! (.-scrollTop history-elem)\n                 (.-scrollHeight history-elem))\n           {})\n       {:dispatch-later [{:ms 10 :dispatch [::auto-scroll]}]}))))\n\n(reg-event-db\n ::clear-chat-history\n [check-spec-interceptor]\n (fn [db _]\n   (assoc-in db (db/key-seq :chat-history) [])))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  ;; import re-frame\n  #_{:clj-kondo/ignore [:duplicate-require]}\n  (require '[re-frame.core :as rf])\n\n  ;; add a chat message to the app-db (makes is appear in the chat history screen)\n  (rf/dispatch [::add-to-app-db-history :model \"hello\"])\n\n  ;; scroll to the bottom\n  (rf/dispatch [::auto-scroll])\n\n  ;; clear the chat history\n  (rf/dispatch [::clear-chat-history]))\n"]}