{"version":3,"sources":["openllm/util.cljs"],"mappings":";AAKA;;;;;;;;uCAAA,vCAAMA,sFAOHC;AAPH,AAQE,IAAMC,sBAAiB,WAAKC;AAAL,AACE,yDAAA,KAAA,vDAACC,0IACU,AAACC,eAAK,AAAA,mFAAOF,gBACb,AAAA,oFAAOA;;AAH3C,AAIE,yDAAA,lDAACC,uDAAc,AAACE,4CAAIJ,oBACAD","names":["openllm.util/chat-history->string","chat-history","entry->chat-line","current-entry","clojure.string.join","cljs.core/name","cljs.core.map"],"sourcesContent":["(ns openllm.util\r\n  \"A collection of utility functions used throughout the application.\r\n   All functions of this namespace must be pure.\"\r\n  (:require [clojure.string :as str]))\r\n\r\n(defn chat-history->string\r\n  \"Converts a chat history to a string representation. Basically, it joins\r\n   the user name and the text of each entry with a colon. The entries are\r\n   separated by a newline.\r\n   Useful for building a chat prompt or exporting the chat history to a\r\n   file.\r\n   Returns the chat history as a string.\"\r\n  [chat-history]\r\n  (let [entry->chat-line (fn [current-entry]\r\n                           (str/join \": \"\r\n                                     [(name (:user current-entry))\r\n                                      (:text current-entry)]))]\r\n    (str/join \"\\n\" (map entry->chat-line\r\n                        chat-history))))\r\n"]}