{"version":3,"sources":["openllm/components/model_selection/data.cljs"],"mappings":";AAOA,AAAAA,yBAAA,AAAA,0JAAA,AAAA,osCAA0B,AAAAC,yDAAA,AAAA,+1BACC,AAAAE,8BAAA,AAAA,g5BAAA,2GAAA,WAAAC,nCAAOC;AAAP,AACQ,kFAAA,zEAAI,6CAAAD,iBAAA,9DAACE,2EACD,6CAAAF,iBAAA,9DAACE,2EACD,6CAAAF,iBAAA,9DAACE;iBAJd,2CAAA,8FAAA,KAAA,6EAAA,6FAAA,AAAA,iFAAA,0FAAA,AAAA,osCAAA,oFAAA,WAAAJ,5wDACC,yMAIMK;AALP,AAAA,+BAAAL,xBAKOK;WALP;AAO1B,AAAAP,yBAAA,AAAA,0IAAA,AAAA,mUAAkB,AAAAC,yDAAA,AAAA,wFAAA,2CAAA,8FAAA,KAAA,6EAAA,6FAAA,AAAA,iFAAA,0FAAA,AAAA,mUAAA,oFAAA,WAAAO,75BAAWH,2NAAcE;AAAzB,AAAA,+BAAAC,xBAAyBD;WAAzB;AAClB,AAAAP,yBAAA,AAAA,gIAAA,AAAA,iFAAaK;AACb,AAAAL,yBAAA,AAAA,mJAAA,AAAA,kFAAsBS;AACtB,AAAAT,yBAAA,AAAA,mJAAA,AAAA,0JAAA;AACA,AAAAA,yBAAA,AAAA,kJAAA,AAAA,iFAAsBK;AAEtB,AAAAL,yBAAA,AAAA,8IAAA,AAAA,47BACE,AAAAU,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,6xBAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,EAAA,AAAAE,0BAAAF,SAAA,oEAAA,EAAA,AAAAE,0BAAAF,SAAA,wDAAA,EAAA,AAAAE,0BAAAF,SAAA,2EAAA,EAAA,AAAAE,0BAAAF,SAAA,2EAAA,AAAAE,0BAAAF,SAAA;GAAA,AAAA,iCAAA,AAAA,6xBAAA,AAAA,KAAA,AAAA,yZAAA,AAAA,iCAAA,AAAA,wnFAAA,AAAA;AAGF,AAAAX,yBAAA,AAAA,sIAAA,AAAA,wUAAgB,AAAAC,yDAAA,AAAA,uTAAA,AAAAa,yDAAA,AAAA,0TAAA,4GAAA,uJAAA,2CAAA,+EAAA,WAAAC,iBAAAC,tUAAUG;AAAV,AAAA,OAAAF,4CAAAD,iBAAA;GAAA,qDAAA,mCAAA,8FAAA,KAAA,qDAAAJ,qBAAA,6FAAA,AAAA,2EAAA,0FAAA,AAAA,wUAAA,oFAAA,WAAAM;AAAA,AAAA,OAAAN,qBAAAM;WAAA;AAMhB,AAAaE,2HACgB,XACA,AAACC,1DACD,q/FAAA,2EAAA,hkGAACC;AAM9B,sDAAA,tDAAMC;AAAN,AAAA;AAEE,OAACC,eAAKJ;;AAER,oDAAA,pDAAMK,gHAAWC;AAAjB,AAAA;AAEE,0GAAA,8FAAA,jMAACC,+CAAOP,uIAAaM","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","G__32091","cljs.spec.alpha/and-spec-impl","p1__32090#","cljs.core/string?","cljs.core._EQ_","cljs.core/vector?","G__32092","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__32093","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.tuple_impl","i__13252__auto__","v__13253__auto__","cljs.core.nth","G__32094","cljs.core/keyword?","openllm.components.model-selection.data/models-data","js/JSON.parse","cljs.core.js__GT_clj","openllm.components.model-selection.data/model-types","cljs.core/keys","openllm.components.model-selection.data/model-ids","model-type","cljs.core.get_in"],"sourcesContent":["(ns openllm.components.model-selection.data\n  (:require-macros [openllm.build :refer [slurp]])\n  (:require [clojure.spec.alpha :as s]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;                Spec                ;;    TODO: -> db\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(s/def ::vec-of-runtimes? (s/coll-of\n                           (s/and string?\n                                  #(or (= % \"pt\")\n                                       (= % \"flax\")  ;; all available runtimes\n                                       (= % \"tf\")))\n                           :kind vector?))\n\n(s/def ::model_id (s/coll-of string? :kind vector?)) ;; model_id is a vector of all models for a given model_type\n(s/def ::url string?)                                ;; url to the model's page\n(s/def ::requires_gpu boolean?)                      ;; whether the model requires a GPU\n(s/def ::runtime_impl ::vec-of-runtimes?)            ;; supported runtimes\n(s/def ::installation string?)                       ;; installation instructions (pip command)\n\n(s/def ::model-spec\n  (s/keys :req-un [::model_id ::url ::requires_gpu   ;; the spec for a single model (aggregates all the above)\n                   ::runtime_impl ::installation]))\n\n(s/def ::models (s/map-of keyword? ::model-spec))    ;; map of all models\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Slurp Data             ;;    TODO: -> effect\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(def ^:const models-data (-> \"./src/generated/models-data.json\"\n                             (slurp ,) ;; see `openllm.build/slurp` to see how this sorcery works\n                             (js/JSON.parse ,)\n                             (js->clj , :keywordize-keys true)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;            Convenience             ;;    TODO: -> subs\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn model-types []\n  \"Returns a list of all `model-types`.\"\n  (keys models-data))\n\n(defn model-ids [model-type]\n  \"Returns a list of all `model-ids` for a given `model-type`.\"\n  (get-in models-data [model-type :model_id]))\n"]}