{"version":3,"sources":["openllm/components/apis/events.cljs"],"mappings":";AAKA;;;uDAAA,vDAAMA,sHAEHC;AAFH,AAGE,OAAA,oFAAA,gBACK,+CAAA,WAAAE,1DAACC,hBACDE;AADA,AAAS,OAACD,6CAAE,AAAA,gFAAAF,kBAAQF;GADpBC;;AAKP,yDAAA,yIAAA,lMAACK,qRAECC,8CACD,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;mBAAT,AAAAF,4CAAAD,WAAA,IAAA,1EAAWI;AAAX,AACE,wDAAA,jDAACC,8CAAMH,yEAAiBE;;AAE3B,yDAAA,uIAAA,hMAACP,mRAECC,8CACD,cAAAQ,HAAKJ;AAAL,AAAA,IAAAK,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAASJ;SAAT,AAAAF,4CAAAM,WAAA,IAAA,hEAAWC;YAAX,AAAAP,4CAAAM,WAAA,IAAA,nEAAcE;AAAd,AACE,6BAAA,mFAAA,mEAAA,5KAACC,mBAASR,sJAAeM,+EAAiBC;;AAE7C,yDAAA,yIAAA,lMAACZ,qRAECC,8CACD,cAAAa,HAAKT;AAAL,AAAA,IAAAU,aAAAD;QAAA,AAAAV,4CAAAW,WAAA,IAAA,/DAAST;SAAT,AAAAF,4CAAAW,WAAA,IAAA,hEAAWJ;YAAX,AAAAP,4CAAAW,WAAA,IAAA,nEAAcH;AAAd,AACE,6BAAA,mFAAA,mEAAA,5KAACC,mBAASR,sJAAeM,mFAAmBC;;AAE/C,yDAAA,8IAAA,vMAACI,0RAECf,8CACD,aAAAgB,FAAKX;AAAL,AAAA,IAAAY,aAAAD;YAAA,AAAAb,4CAAAc,WAAA,IAAA,nEAAQZ;SAAR,AAAAF,4CAAAc,WAAA,IAAA,hEAAUP;YAAV,AAAAP,4CAAAc,WAAA,IAAA,nEAAaN;AAAb,AAAA,kDAAA,6DACa,sGAAA,yFAAA,2CAAA,iEAAA,mFAAA,oJAAA,gEAAA,mFAAA,rqBAACO,6CAAK,AAAC1B,qDAAmBkB,uFAAKC,8UAAwCD,uSACAA","names":["openllm.components.apis.events/api-id->http-event","api-id","openllm.components.apis.data/endpoints-data","p1__28840#","cljs.core.filter","cljs.core._EQ_","cljs.core/first","re_frame.core.reg_event_db","openllm.events/check-spec-interceptor","p__28841","vec__28842","cljs.core.nth","db","_","selected-api","cljs.core.assoc","p__28845","vec__28846","id","value","cljs.core/assoc-in","p__28849","vec__28850","re_frame.core.reg_event_fx","p__28853","vec__28854","cljs.core.into"],"sourcesContent":["(ns openllm.components.apis.events\n  (:require [openllm.components.apis.data :as data]\n            [openllm.events :refer [check-spec-interceptor]]\n            [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n(defn api-id->http-event\n  \"Returns the http event for the given `api-id`.\"\n  [api-id]\n  (->> data/endpoints-data\n       (filter #(= (:id %) api-id))\n       first\n       :event))\n\n(reg-event-db\n ::set-selected-api\n [check-spec-interceptor]\n (fn [db [_ selected-api]]\n   (assoc db :selected-api selected-api)))\n\n(reg-event-db\n ::set-input-value\n [check-spec-interceptor]\n (fn [db [_ id value]]\n   (assoc-in db [:apis-data id :input-value] value)))\n\n(reg-event-db\n ::set-last-response\n [check-spec-interceptor]\n (fn [db [_ id value]]\n   (assoc-in db [:apis-data id :last-response] value)))\n\n(reg-event-fx\n ::on-send-button-click\n [check-spec-interceptor]\n (fn [_ [_ id value]]\n   {:dispatch (into (api-id->http-event id) [value {:on-success [::set-last-response id]\n                                                    :on-failure [::set-last-response id]}])}))\n"]}