{"version":3,"sources":["openllm/components/side_bar/model_params/views.cljs"],"mappings":";AAOA;;;;kEAAA,lEAAMA,4IAGHC,GAAGC;AAHN,AAIE,IAAME,UAAQ,+GAAA,sFAAA,rMAACC,+CAAOC,mJAAwBL;IACxCM,kBAAU,AAACC,6CAAEC,qBAAK,+GAAA,sFAAA,rMAACJ,+CAAOC,mJAAwBL;gBADxD,WAAAE,vBAEMO;AAFN,AAEiB,8BAAA,mFAAA,1GAACC,wSAAiDV,GAAG,AAAA,AAAAE;;AAFtE,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,4CAAA,mFAAA,sDAAA,2CAAA,qDAAA,QAAA,2EAAA,2EAAA,kFAAA,4DAAA,wDAAA,mBAAA,7TAKiB,AAACS,gBAAMR,0DACP,AAACS,iBAAOT,8DACP,mBAAA,IAAA,rBAAIG,iFACHL,gJAEIQ;;AAEzB;;;;uEAAA,vEAAMI,sJAGHb,GAAGC;AAHN,AAIE,gBAAA,WAAAa,vBAAML;AAAN,AAAiB,8BAAA,mFAAA,1GAACC,wSAAiDV,GAAG,AAAA,AAAAc;;IAChER,kBAAU,AAACC,6CAAEC,qBAAK,+GAAA,sFAAA,rMAACJ,+CAAOC,mJAAwBL;AADxD,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,SAAA,wDAAA,0EAAA,kFAAA,4DAAA,zFAIiB,mBAAA,IAAA,rBAAIM,iFACHL,qEACIQ;;AAExB;;;oEAAA,pEAAMM,gJAEHf,GAAGC;AAFN,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,WAAA,wDAAA,YAAA,gEAAA,+DAAA,rEAKoBA;AALpB,AAMuB,8BAAA,mFAAA,1GAACS,wSAAiDV,GAAG,AAACgB,cAAIf;;;AAEjF;;;kEAAA,lEAAMiB,4IAEHlB,GAAGC;AAFN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,mCAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,wDAAA,iCAAA,4DAAA,+DAAA,WAAAgB,hFAMmBhB;AANnB,AAOwB,8BAAA,mFAAA,1GAACS,wSAAiDV,GAAG,AAACmB,qBAAW,AAAA,AAAAF;;;AAEzF;;;;sEAAA,8EAAAG,pJAAMM;AAAN,AAAA,IAAAL,aAAAD;SAAA,AAAAE,4CAAAD,WAAA,IAAA,hEAGIrB;IAHJuB,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAGetB;WAHf,AAAAwB,4CAAAF,eAAA,lEAGqBI;AAHrB,AAIE,IAAMC,eAAa,+GAAA,sFAAA,rMAACxB,+CAAOC,mJAAwBL;AAAnD,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,kCAAA,mFAAA,uDAAA,2CAAA,wDAAA,u7CAAA,mFAAA,iDAAA,2CAAA,wDAAA,joDAGI2B,KACA,uHAAA,AAAA,yKAAA,9RAAM,6CAAA,7CAACpB,sGAAUqB,kGACdf,qEAAsBb,GAAGC,oBAC5B,wHAAA,AAAA,sKAAA,5RAAM,6CAAA,7CAACM,uGAAUqB,kGACdb,kEAAmBf,GAAGC,oBACzB,sHAAA,AAAA,oKAAA,xRAAM,6CAAA,7CAACM,qGAASqB,kGACbV,gEAAiBlB,GAAGC,4BACxB,uHAAA,AAAA,mFAAA,mDAAA,2CAAA,wDAAA,iBAAA,4KAAA,3hBAAM,6CAAA,7CAACM,sGAAUqB,4VAEb7B,gEAAiBC,GAAGC;;AAG7B;;;;gEAAA,hEAAM4B;AAAN,AAIE,IAAMC,eAAa,sDAAA,mFAAA,zIAACC;AAApB,AACE;AAAA,AACE,oDAAA,mFAAA,hIAACC,yLAAW,gHAAA,AAAAC,hHAACC,4CAAIR,oFAAsBI","names":["openllm.components.side-bar.model-params.views/parameter-slider","id","value","p1__28593#","min-max","cljs.core.get_in","openllm.components.side-bar.model-params.db/parameter-meta-data","num-type?","cljs.core._EQ_","cljs.core/int?","on-change","re-frame.core/dispatch","cljs.core/first","cljs.core/second","openllm.components.side-bar.model-params.views/parameter-small-input","p1__28594#","openllm.components.side-bar.model-params.views/parameter-checkbox","cljs.core/not","p1__28599#","openllm.components.side-bar.model-params.views/parameter-number","cljs.core/parse-long","p__28600","vec__28601","cljs.core.nth","map__28604","cljs.core/--destructure-map","cljs.core.get","openllm.components.side-bar.model-params.views/parameter-list-entry","name","display-type","openllm.components.side-bar.model-params.views/parameter-list","model-config","re_frame.core.subscribe","cljs.core.into","cljs.core/deref","cljs.core.map"],"sourcesContent":["(ns openllm.components.side-bar.model-params.views\n  (:require [openllm.components.side-bar.model-params.db :as db]\n            [openllm.components.side-bar.model-params.subs :as subs] \n            [openllm.components.side-bar.model-params.events :as events]\n            [clojure.string :as str]\n            [re-frame.core :as rf]))\n\n(defn parameter-slider\n  \"Renders a slider with an input field next to it. The num-type logic needs to be\n   revamped big time xx\"\n  [id value]\n  (let [min-max (get-in db/parameter-meta-data [id :val-constraint])\n        num-type? (= int? (get-in db/parameter-meta-data [id :type-pred]))\n        on-change #(rf/dispatch [::events/set-model-config-parameter id (.. % -target -value)])]\n    [:div {:class \"flex flex-row items-center w-full\"}\n     [:input {:type \"range\"\n              :min (first min-max)\n              :max (second min-max)\n              :step (if num-type? 1 0.01)\n              :value value\n              :class \"w-full mt-2 mb-1\"\n              :on-change on-change}]]))\n\n(defn parameter-small-input\n  \"Renders a small input field, used in combination with the sliders. The num-type logic\n   needs to be revamped big time xx\"\n  [id value]\n  (let [on-change #(rf/dispatch [::events/set-model-config-parameter id (.. % -target -value)])\n        num-type? (= int? (get-in db/parameter-meta-data [id :type-pred]))]\n    [:input {:type \"number\"\n             :class \"display-none absolute right-5 w-12 px-0 py-0 pr-0.5 text-xs text-center\"\n             :step (if num-type? 1 0.01)\n             :value value\n             :on-change on-change}]))\n\n(defn parameter-checkbox\n  \"Renders a checkbox.\"\n  [id value]\n  [:input {:type \"checkbox\"\n           :class \"ml-6 mt-1\"\n           :checked value\n           :on-change #(rf/dispatch [::events/set-model-config-parameter id (not value)])}])\n\n(defn parameter-number\n  \"Renders a number input field.\"\n  [id value]\n  [:div {:class \"absolute right-5 -mt-0.5\"}\n   [:input {:type \"text\"\n            :class \"px-1 py-0 text-xs rounded w-16\"\n            :value value\n            :on-change #(rf/dispatch [::events/set-model-config-parameter id (parse-long (.. % -target -value))])}]])\n\n(defn parameter-list-entry\n  \"Renders a single parameter in the sidebar's parameter list. Used as a mapping function\n   on the collection of all parameters.\"\n  [[id {:keys [value name]}]]\n  (let [display-type (get-in db/parameter-meta-data [id :display-type])]\n    [:div {:class \"flex flex-col px-2 py-1\"}\n     [:label {:class \"flex w-fit text-xs\"}\n      name\n      (when (= :slider display-type)\n        [parameter-small-input id value])\n      (when (= :binary display-type)\n        [parameter-checkbox id value])\n      (when (= :field display-type)\n        [parameter-number id value])]\n     (when (= :slider display-type)\n       [:div {:class \"mt-0.5\"}\n        [parameter-slider id value]])\n     [:hr {:class \"mt-1.5 border-1 border-gray-100\"}]]))\n\n(defn parameter-list\n  \"Renders the parameters in the sidebar. The parameters are retrieved from the\n   `human-readable-config` subscription.\"\n  []\n  (let [model-config (rf/subscribe [::subs/human-readable-config])]\n    (fn []\n      (into [:<>] (map parameter-list-entry @model-config)))))\n"]}