{"version":3,"sources":["openllm/api/persistence.cljs"],"mappings":";AASA,mCAAA,2CAAA,2DAAA,yBAAA,iEAAA,nOAAKA;AAGL,yCAAA,2CAAA,qDAAA,eAAA,wDAAA,mFAAA,2CAAA,qDAAA,OAAA,wDAAA,lcAAKC;AAIL,wCAAA,2CAAA,oMAAA,vRAAKC,8IAAwB,6EAAA,7EAACC,4CAAIH,yJACL,mFAAA,nFAACG,4CAAIF;AAMlC;;;;;;;;4CAAA,5CAAMG;AAAN,AAQE,mEAAA,0GAAA,7KAACC;;AACD,8BAAA,mFAAA,1GAACC;;AAEH;;;;;;;;mCAAA,nCAAMC;AAAN,AAQE,mEAAA,0GAAA,7KAACF;;AACD,OAACG,2EAAgBR,iCAASC,uCAAeG;;AAE3C;;;;;;;;qDAAA,rDAAMK,kHAOHC;AAPH,AAQE,IAAMC,aAAW,WAAKC;AAAL,oGAAkBA,/CACA,uDAAA,vDAACC,rDACD,+JAAA,xJAACC,6MAAc,AAACC,gDAAQ,AAAA,mFAAOH;;AAFlE,AAGE,OAACI,cAAI,AAACC,4CAAIN,WAAWD;;AAQzB,yDAAA,4IAAA,rMAACQ,sOAGA,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQE;gBAAR,AAAAD,4CAAAD,WAAA,IAAA,vEAAUG;WAAV,AAAAF,4CAAAD,WAAA,IAAA,lEAAoBI;cAApB,AAAAH,4CAAAD,WAAA,IAAA,rEAAyBR;AAAzB,AACE,sFAAA,2CAAA,0DAAA,8DAAA,lPAACa,yCAAYvB,sIACOsB,2DAAWZ,sEACNW;;AAM5B,yDAAA,zDAACG,kMAEA,cAAAC,HAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAN,4CAAAO,WAAA,IAAA,/DAASN;mBAAT,AAAAD,4CAAAO,WAAA,IAAA,1EAAWlB;AAAX,AACE,IAAMoB,qBAAmB,AAACrB,mDAAwBC;AAAlD,AACE,mEAAA,0GAAA,gGAAA,7QAACL,yOACI,AAAC0B,gBAAMD;;AACZ,OAACE,mBAASH,GACA,0HAAA,1HAACI,oMACDH;;AAOf,yDAAA,2HAAA,pLAACZ,qNAGA,aAAAgB,FAAKZ;AAAL,AAAA,IAAAa,aAAAD;YAAA,AAAAb,4CAAAc,WAAA,IAAA,nEAAQb;AAAR,AACE,IAAMc,cAAY,WAAKC;AAAL,AACE,8BAAA,mFAAA,1GAAC/B,mPAAuC,mHAAA,2EAAA,9LAACgC,0DAAQD;;AADrE,AAEE,OAACE,uCAAerC,sCAAckC;;AAEnC,yDAAA,6HAAA,tLAAClB,uNAGA,aAAAsB,FAAKlB;AAAL,AAAA,IAAAmB,aAAAD;YAAA,AAAAnB,4CAAAoB,WAAA,IAAA,nEAAQnB;AAAR,AACE,OAACoB,oDAAuBxC;;AAM3B","names":["openllm.api.persistence/idb-info","openllm.api.persistence/idb-table-info","openllm.api.persistence/obj-store-fqn","cljs.core.get","openllm.api.persistence/on-db-initialized","openllm.api.log4cljs.core.log","re-frame.core/dispatch","openllm.api.persistence/init-idb","openllm.api.indexed_db.core.initialize_BANG_","openllm.api.persistence/chat-history->sanitized","chat-history","mapping-fn","message","cljs.core.dissoc","cljs.core.assoc","cljs.core.keyword","cljs.core/vec","cljs.core.map","re_frame.core.reg_event_fx","p__39080","vec__39081","cljs.core.nth","_","timestamp","user","openllm.api.indexed-db.core/os-add!","re_frame.core.reg_event_db","p__39085","vec__39088","db","clean-chat-history","cljs.core/count","cljs.core/assoc-in","openllm.components.chat.db.key_seq","p__39092","vec__39093","callback-fn","result","cljs.core.js__GT_clj","openllm.api.indexed-db.core/os-get-all","p__39097","vec__39098","openllm.api.indexed-db.core/wipe-object-store!"],"sourcesContent":["(ns openllm.api.persistence\n  (:require [openllm.components.chat.db :as chat-db]\n            [openllm.api.indexed-db.core :as idb]\n            [openllm.api.log4cljs.core :refer [log]]\n            [re-frame.core :as rf]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;              Constants             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(def idb-info {:db-name \"OpenLLM_clj_GutZuFusss\"\n               :db-version 1})\n\n(def idb-table-info\n  {:name \"chat-history\"\n   :index [{:name \"user\" :unique false}]})\n\n(def obj-store-fqn {:db-name (get idb-info :db-name)\n                    :os-name (get idb-table-info :name)})\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;              Functions             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn on-db-initialized\n  \"Passed as the callback function to `idb/initialize!` to set the\n   :idb key in the app-db.\n\n   This function also dispatches the `::sync-chat-history` event to\n   populate the chat history in the app-db with the data from the\n   IndexedDB database.\"\n  []\n  (log :debug \"IndexedDB database initialized\")\n  (rf/dispatch [::sync-chat-history]))\n\n(defn init-idb\n  \"Initializes the IndexedDB database and creates the object store\n   if it does not exist.\n\n   This function notably registers the `on-db-initialized` function\n   as a callback function to be called when the IndexedDB database\n   is initialized.\"\n  []\n  (log :debug \"Initializing IndexedDB database...\")\n  (idb/initialize! idb-info idb-table-info on-db-initialized))\n\n(defn chat-history->sanitized\n  \"Takes the chat history from the IndexedDB database and cleans it\n   up to be used in the app-db.\n\n   First, the `:id` key is removed from each message, and then the\n   values belonging to the `:user` keys are converted to a keyword.\n   Finally, the chat history is converted to a vector.\"\n  [chat-history]\n  (let [mapping-fn (fn [message] (-> message\n                                     (dissoc , :id)\n                                     (assoc , :user (keyword (:user message)))))]\n    (vec (map mapping-fn chat-history))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Events               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Adds a chat message to the IndexedDB database. Is dispatched when the user\n;; sends or receives a message in the chat.\n(rf/reg-event-fx\n ::add-to-indexed-db-history\n []\n (fn [_ [_ timestamp user message]]\n   (idb/os-add! obj-store-fqn\n                {:user user :text message\n                 :timestamp timestamp})))\n\n;; This event will override the chat history in the app-db with the data from\n;; the IndexedDB database. It will be dispatched as a callback function to\n;; `idb/os-get-all`, which is called in the `::sync-chat-history` event from\n;; this namespace.\n(rf/reg-event-db\n ::set-chat-history-app-db\n (fn [db [_ chat-history]]\n   (let [clean-chat-history (chat-history->sanitized chat-history)]\n     (log :debug \"Synchronized chat history with IndexedDB database, loaded\"\n          (count clean-chat-history) \"messages.\")\n     (assoc-in db\n               (chat-db/key-seq :chat-history)\n               clean-chat-history))))\n\n;; Will be dispatched when the IndexedDB database is initialized, and will\n;; populate the chat history in the app-db with the data from the IndexedDB\n;; database.\n;; Passes the `dispatch` function for the `::set-chat-history-app-db` event\n;; to the callback function of `idb/os-get-all`.\n(rf/reg-event-fx\n ::sync-chat-history\n []\n (fn [_ [_]]\n   (let [callback-fn (fn [result]\n                       (rf/dispatch [::set-chat-history-app-db (js->clj result :keywordize-keys true)]))]\n     (idb/os-get-all obj-store-fqn callback-fn))))\n\n(rf/reg-event-fx\n ::clear-chat-history\n []\n (fn [_ [_]]\n   (idb/wipe-object-store! obj-store-fqn)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  ;; add a chat message to the database\n  (rf/dispatch [::add-to-indexed-db-history :model \"hello\"])\n\n  ;; sanitizing chat history demo\n  (def chat-history [{:id 1 :user \"model\" :text \"hi\"}\n                     {:id 2 :user \"user\" :text \"hey\"}])\n\n  (chat-history->sanitized chat-history) ;; => [{:user :model, :text \"hi\"} {:user :user, :text \"hey\"}]\n\n  ;; set the chat history in the app-db to the data from the indexed-db database\n  (rf/dispatch [::sync-chat-history]))\n"]}