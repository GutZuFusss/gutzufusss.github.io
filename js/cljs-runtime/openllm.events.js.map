{"version":3,"sources":["openllm/events.cljs"],"mappings":";AASA;;;;iCAAA,jCAAMA,0EAGHC,OAAOC;AAHV,AAIE,GAAU,AAACC,2DAASF,OAAOC;AAA3B;;AAAA,AACE,MAAO,wHAAA,xHAACE,gDAAQ,CAAA,sBAA2B,AAACC,4BAAcJ,OAAOC;;;AAErE;;;;AAAKI,wCAGH,AAACC,oBAAM,+EAAA,/EAACC,gDAAQR;AAMlB,uBAAA,vBAACS,oFAEA,WAAKC,KAAKC;AAAV,AACE,0DAAA,nDAACC,8CAAMF,kEAAe,KAAAG;;AAMzB,yDAAA,uEAAA,hIAACC,mNAECR,8CACD,WAAKK,EAAEA;AAAP,AACEI;;AAEH,yDAAA,uEAAA,hIAACD,mNAECR,8CACD,cAAAU,HAAKd;AAAL,AAAA,IAAAe,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASN;oBAAT,AAAAO,4CAAAD,WAAA,IAAA,3EAAWE;AAAX,AACE,wDAAA,jDAACP,8CAAMV,+DAAciB;;AAExB,yDAAA,zDAACC,wKAEA,aAAAC,FAAKV;AAAL,AAAA,IAAAW,aAAAD;YAAA,AAAAH,4CAAAI,WAAA,IAAA,nEAAQX;UAAR,AAAAO,4CAAAI,WAAA,IAAA,jEAAUC;AAAV,AAAA,kDAAA,kDACO,gBAAA,hBAACC,YAAeD;;AAMxB","names":["openllm.events/check-and-throw","a-spec","db","cljs.spec.alpha.valid_QMARK_","cljs.core.ex_info","cljs.spec.alpha/explain-str","openllm.events/check-spec-interceptor","re-frame.core/after","cljs.core.partial","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","js/Date","re_frame.core.reg_event_db","openllm.db/default-db","p__28500","vec__28501","cljs.core.nth","new-screen-id","re_frame.core.reg_event_fx","p__28504","vec__28505","url","js/window.open"],"sourcesContent":["(ns openllm.events\n    (:require [cljs.spec.alpha :as s]\n              [openllm.db :as db]\n              [re-frame.core :refer [after reg-cofx reg-event-db reg-event-fx]]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;              Functions             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn check-and-throw\n  \"Throws an exception if `db` does not match the Spec `a-spec`. Acts as a helper\n   for our spec checking interceptor.\"\n  [a-spec db]\n  (when-not (s/valid? a-spec db)\n    (throw (ex-info (str \"spec check failed: \" (s/explain-str a-spec db)) {}))))\n\n(def check-spec-interceptor\n  \"The interceptor we will use to check the app-db after each event handler runs.\n   It will check that the app-db is valid against the spec `::db`.\"\n  (after (partial check-and-throw ::db/db)))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;             Coeffects              ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-cofx\n :time-now\n (fn [cofx _]\n   (assoc cofx :time-now (js/Date.))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Events               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-event-db\n :initialise-db\n [check-spec-interceptor]\n (fn [_ _]\n   db/default-db))\n\n(reg-event-db\n :set-screen-id\n [check-spec-interceptor]\n (fn [db [_ new-screen-id]]\n   (assoc db :screen-id new-screen-id)))\n\n(reg-event-fx\n ::open-link-in-new-tab\n (fn [_ [_ url]] \n   {:fx (js/window.open url \"_blank\")})) ;; hitchu with da side fx's *new wave uptempo kick*\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;           Rich Comments            ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  #_{:clj-kondo/ignore [:duplicate-require]}\n  (require '[re-frame.core :as rf])\n\n  ;; set screen-id to :chat\n  (rf/dispatch-sync [:set-screen-id :chat])\n\n  ;; reset app-db to default-db\n  (rf/dispatch-sync [:initialise-db]))\n"]}