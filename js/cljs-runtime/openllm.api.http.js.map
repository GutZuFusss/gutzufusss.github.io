{"version":3,"sources":["openllm/api/http.cljs"],"mappings":";AAQA;;;2BAAA,3BAAOA,8DAEJC,aAAaC;AAFhB,AAGE,oDAAKD,0DAAaC;;AAMpB,yDAAA,kGAAA,3JAACC,4LAGA,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaU;IAAbP,aAAAJ;IAAAK,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAAmBK;IAAnBL,mBAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;aAAAE,TAAqBM;IAArBN,mBAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;iBAAAE,bAA4BO;IAA5BJ,aAAAL;IAAAK,iBAAA,AAAAR,4BAAAQ;iBAAA,AAAAP,4CAAAO,eAAA,xEAAiDK;iBAAjD,AAAAZ,4CAAAO,eAAA,xEAA4DM;AAA5D,AACE,IAAMC,WAAS,+CAAA,/CAACd,4CAAIQ;AAApB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,qGAAA,wDAAA,2CAAA,+DAAA,oFAAA,0FAAA,iOAAA,4EAAA,/qBAEiC,kCAAA,lCAAChB,yBAAQsB,oLACAJ,wEACIC,6EACb,AAACI,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,uNACDJ,2EACAC;;AAEpC,yDAAA,kGAAA,3JAAClB,4LAGA,WAAAsB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAApB,4BAAAoB;SAAA,AAAAnB,4CAAAmB,eAAA,hEAAaX;IAAbY,aAAAF;IAAAG,aAAA,AAAAlB,cAAAiB;IAAAE,eAAA,AAAAjB,gBAAAgB;IAAAA,iBAAA,AAAAf,eAAAe;QAAAC,JAAmBb;IAAnBa,mBAAA,AAAAjB,gBAAAgB;IAAAA,iBAAA,AAAAf,eAAAe;WAAAC,PAAqBE;IAArBD,aAAAF;IAAAE,iBAAA,AAAAxB,4BAAAwB;iBAAA,AAAAvB,4CAAAuB,eAAA,xEAAoCX;iBAApC,AAAAZ,4CAAAuB,eAAA,xEAA+CV;AAA/C,AACE,IAAMC,WAAS,+CAAA,/CAACd,4CAAIQ;AAApB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,qGAAA,6DAAA,0FAAA,iOAAA,4EAAA,tfAEiC,kCAAA,lCAAChB,yBAAQsB,iFACTU,+DACA,AAACT,2GACD,+BAAA,2CAAA,8DAAA,xIAACC,uNACDJ,2EACAC","names":["openllm.api.http/get-uri","api-base-url","endpoint","re_frame.core.reg_event_fx","p__29077","p__29078","map__29079","cljs.core/--destructure-map","cljs.core.get","vec__29080","seq__29081","cljs.core/seq","first__29082","cljs.core/first","cljs.core/next","map__29083","db","_","prompt","llm-config","on-success","on-failure","base-url","ajax.core/json-request-format","ajax.core/json-response-format","p__29084","p__29085","map__29086","vec__29087","seq__29088","first__29089","map__29090","json"],"sourcesContent":["(ns openllm.api.http\n  (:require [ajax.core :as ajax]\n            [re-frame.core :refer [reg-event-fx]]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;              Functions             ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn- get-uri\n  \"Returns the URI for the given endpoint.\"\n  [api-base-url endpoint]\n  (str api-base-url endpoint))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;               Events               ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(reg-event-fx\n ::v1-generate\n []\n (fn [{:keys [db]} [_ prompt llm-config & {:keys [on-success on-failure]}]]\n   (let [base-url (get db :api-base-url)]\n     {:http-xhrio {:method          :post\n                   :uri             (get-uri base-url \"/v1/generate\")\n                   :params          {:prompt prompt\n                                     :llm_config llm-config}\n                   :format          (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success      on-success\n                   :on-failure      on-failure}})))\n\n(reg-event-fx\n ::v1-metadata\n []\n (fn [{:keys [db]} [_ json & {:keys [on-success on-failure]}]]\n   (let [base-url (get db :api-base-url)]\n     {:http-xhrio {:method          :post\n                   :uri             (get-uri base-url \"/v1/metadata\")\n                   :params          json\n                   :format          (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   :on-success      on-success\n                   :on-failure      on-failure}})))\n"]}