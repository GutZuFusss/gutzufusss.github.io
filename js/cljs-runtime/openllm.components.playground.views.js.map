{"version":3,"sources":["openllm/components/playground/views.cljs"],"mappings":";AAgBA;;;kDAAA,lDAAMA;AAAN,AAGE,IAAMC,QAAM,sDAAA,mFAAA,zIAACC;AAAb,AACE;AAAA,AAAA,0FAAA,6DAAA,2CAAA,wDAAA,iDAAA,sDAAA,AAAAC,uBAAA,+DAAA,WAAAC,jFAEsBH;AAFtB,AAG0B,8BAAA,mFAAA,1GAACI,+PAAuC,AAAA,AAAAD;;;;AAEtE;;;oDAAA,pDAAOE;AAAP,AAAA,+HAAA,2CAAA,sDAAA,uCAAA,mFAAA,mDAAA,6HAAA,2CAAA,yEAAA,piBAGGC,sYAEEC;;AAEL;;;;2DAAA,3DAAMC;AAAN,AAIE,IAAMC,cAAY,sDAAA,mFAAA,zIAACR;IACbS,aAAW,sDAAA,mFAAA,zIAACT;AADlB,AAEE;AAAA,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,0CAAA,6IAAA,sHAAA,2CAAA,qDAAA,SAAA,2DAAA,WAAA,6DAAA,5ZAEII,6IACAM;AAHJ,AAKuB,8BAAA,mFAAA,qJAAA,/PAACP;WALxB,gBAAA,sHAAA,2CAAA,qDAAA,SAAA,2DAAA,WAAA,0OAAA,uDAAA,2CAAA,uDAAA,eAAA,6DAAA,jqBAMIO,8QAEkB,sDAAA,tDAACC,yIAAcC;AARrC,AAUuB,8BAAA,mFAAA,6JAAA,AAAAX,6BAAA,AAAAA,pSAACE,uRAA4CK,6BAAaC;WAVjF;;;AAYJ;;;;;;;oDAAA,pDAAMI;AAAN,AAOE,IAAMC,gBAAc,sDAAA,mFAAA,zIAACd;AAArB,AACE;AAAA,AAAA,0FAAA,mDAAA,4HAAA,WAAA,YAAA,mFAAA,6DAAA,2CAAA,wDAAA,iDAAA,sDAAA,AAAAC,+BAAA,8DAAA,vfAEIc,0aAEmBD;;;AAG3B;;;;;qDAAA,rDAAOE;AAAP,AAKE,IAAMC,oBAAY,sDAAA,mFAAA,zIAACjB;IACbc,gBAAc,sDAAA,mFAAA,zIAACd;AADrB,AAEE;AAAA,AAAA,2HAAA,2CAAA,sDAAA,AAAAC,mCAAA,6DAAA,lOACGiB,kJACQD;AAFX,AAGe,8BAAA,mFAAA,1GAACd;GAHhB,2EAAA,uBAAA,6EAAA,6BAAA,2DAAA,mFAAA,2CAAA,uDAAA,QAAA,6DAAA;AAAA,AAO0B,8BAAA,mFAAA,1GAACA;2BAP3B,gHAAA,2CAAA,uDAAA,2CAAA,8DAAA,WAAA,uDAAA,MAAA,oDAAA,MAAA,qDAAA,MAAA,+DAAA,wCAAA,oHAAA,2CAAA,gEAAA,KAAA,uDAAA,2CAAA,2DAAA,4BAAA,8HAAA,2CAAA,kDAAA,uBAAA,2DAAA,aAAA,mBAAA,8HAAA,2CAAA,kDAAA,6BAAA,2DAAA,gBAAA,AAAAF,zjDAQIkB,+lBAKCC,6ZAECC,6UAGAA,gQAECP;;;AAEX;;;;;8DAAA,9DAAMQ;AAAN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,kCAAA,8IAAA,2IAAA,oJAAA,mFAAA,mDAAA,2CAAA,wDAAA,eAAA,llBAMIN,8IACAlB,2IACAS,4YAECM","names":["openllm.components.playground.views/input-field","value","re_frame.core.subscribe","cljs.core/deref","p1__40148#","re-frame.core/dispatch","openllm.components.playground.views/upload-button","reagent-mui.material.tooltip/tooltip","openllm.api.components/file-upload-button","openllm.components.playground.views/input-field-controls","input-value","llm-config","reagent-mui.material.button/button","reagent.core.as_element","reagent-mui.icons.send/send","openllm.components.playground.views/response-area","last-response","openllm.components.common.views/headline","openllm.components.playground.views/response-modal","modal-open?","reagent-mui.material.modal/modal","reagent-mui.material.box/box","reagent-mui.material.paper/paper","reagent-mui.material.typography/typography","openllm.components.playground.views/playground-tab-contents"],"sourcesContent":["(ns openllm.components.playground.views\n  (:require [openllm.components.playground.events :as events]\n            [openllm.components.playground.subs :as subs]\n            [openllm.api.components :as api-components]\n            [openllm.components.common.views :as ui]\n            [openllm.components.side-bar.model-params.subs :as model-params-subs]\n            [re-frame.core :as rf]\n            [reagent-mui.material.button :refer [button]]\n            [reagent-mui.material.modal :refer [modal]]\n            [reagent-mui.material.box :refer [box]]\n            [reagent-mui.material.paper :refer [paper]]\n            [reagent-mui.material.typography :refer [typography]]\n            [reagent-mui.material.tooltip :refer [tooltip]]\n            [reagent-mui.icons.send :as send-icon]\n            [reagent.core :as r]))\n\n(defn input-field\n  \"The input field for the prompt to send to the backend.\"\n  []\n  (let [value (rf/subscribe [::subs/playground-input-value])]\n    (fn []\n      [:textarea {:class \"pt-3 w-full h-[calc(100%_-_74px)] block border\"\n                  :value @value\n                  :on-change #(rf/dispatch [::events/set-prompt-input (.. % -target -value)])}])))\n\n(defn- upload-button\n  \"The little button to upload a file to be used as prompt.\"\n  []\n  [tooltip {:title \"Upload file to use as prompt\"}\n   [:div\n    [api-components/file-upload-button {:callback-event ::events/set-prompt-input}]]])\n\n(defn input-field-controls\n  \"Control buttons for the input field, where the user enters his/her\n   prompt.\"\n  []\n  (let [input-value (rf/subscribe [::subs/playground-input-value])\n        llm-config (rf/subscribe [::model-params-subs/model-config])]\n    (fn []\n      [:div {:class \"mt-3 flex justify-end space-x-2\"}\n       [upload-button]\n       [button {:type \"button\"\n                :variant \"outlined\"\n                :on-click #(rf/dispatch [::events/set-prompt-input \"\"])} \"Clear\"]\n       [button {:type \"button\"\n                :variant \"outlined\"\n                :end-icon (r/as-element [send-icon/send])\n                :style {:width \"96px\"}\n                :on-click #(rf/dispatch [::events/on-send-button-click @input-value @llm-config])} \"Send\"]])))\n\n(defn response-area\n  \"The latest response retrieved from the backend will be displayed in this\n   component.\n   By default this is not visible, but it will be shown once the user has\n   resized the input field. After that, resizing the browser window will no\n   longer scale the input field.\"\n  []\n  (let [last-response (rf/subscribe [::subs/last-response])]\n    (fn []\n      [:div\n       [ui/headline \"Response\" 0]\n       [:textarea {:class \"pt-3 mt-1 w-full h-64 block border bg-gray-200\"\n                   :value @last-response\n                   :disabled true}]])))\n\n(defn- response-modal\n  \"The modal that is shown to display server response in the playground view.\n   It is opened and closed by the `::toggle-modal` event. The modal is closed\n   by clicking the close button or somewhere outside of the modal.\"\n  []\n  (let [modal-open? (rf/subscribe [::subs/response-modal-open?])\n        last-response (rf/subscribe [::subs/last-response])]\n    (fn []\n      [modal\n       {:open @modal-open?\n        :on-close #(rf/dispatch [::events/toggle-modal])\n        :aria-labelledby \"response-modal-title\"\n        :aria-describedby \"response-modal-description\"\n        :actions [{:label \"Close\"\n                   :on-click #(rf/dispatch [::events/toggle-modal])}]}\n       [box {:style {:position \"absolute\"\n                     :width 800,\n                     :top \"50%\"\n                     :left \"50%\"\n                     :transform \"translate(-50%, -50%)\"}}\n        [paper {:elevation 24\n                :style {:padding \"20px 30px\"}}\n         [typography {:id \"response-modal-title\"\n                      :variant \"h6\"}\n          \"Response\"]\n         [typography {:id \"response-modal-description\"\n                      :variant \"body1\"}\n          @last-response]]]])))\n\n(defn playground-tab-contents\n  \"This function aggregates all contents of the playground tab, and is\n   called by the `tab-content` function residing in the `views` namespace\n   directly.\"\n  []\n  [:div {:class \"mt-6 pb-3.5 pr-3 h-full\"}\n   [response-modal]\n   [input-field]\n   [input-field-controls]\n   [:div {:class \"mt-6\"}\n    [response-area]]])\n"]}